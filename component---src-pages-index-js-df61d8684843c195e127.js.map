{"version":3,"sources":["webpack:///./src/components/container.js","webpack:///./src/components/card.js","webpack:///./src/components/sidebar.js","webpack:///./src/data/questions.js","webpack:///./src/pages/index.js"],"names":["Container","children","className","styles","card","padding","background","boxShadow","borderRadius","title","marginBottom","fontSize","answer","backgroundColor","display","lineHeight","Card","style","dangerouslySetInnerHTML","__html","button","width","cursor","Sidebar","items","onItemChange","useState","value","active","setActive","map","item","i","key","fontWeight","onClick","val","type","text","questionsData","javascript","q","a","htmlCss","scss","sidebarItems","IndexPage","selectedCategory","setSelectedCategory","questions","useMemo"],"mappings":"mJAceA,EAXG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,UAAb,OAChB,yBAAKA,UAAWA,GACbD,ICFCE,EAAS,CACbC,KAAM,CACJC,QAAS,GACTC,WAAY,QAEZC,UAAW,8BAEXC,aAAc,GAEhBC,MAAO,CACLC,aAAc,OACdC,SAAU,SAEZC,OAAQ,CACNP,QAAS,GACTQ,gBAAiB,UACjBC,QAAS,eACTH,SAAU,QACVI,WAAY,MAiBDC,EAbF,SAAC,GAAD,IAAGP,EAAH,EAAGA,MAAOG,EAAV,EAAUA,OAAQV,EAAlB,EAAkBA,UAAlB,OACX,6BAASA,UAAWA,EAAWe,MAAOd,EAAOC,MAC3C,wBAAIa,MAAOd,EAAOM,MAAOS,wBAAyB,CAACC,OAAQV,KAC3D,yBAAKQ,MAAOd,EAAOS,OAAQM,wBAAyB,CAACC,OAAQP,OCzB3DT,EAAS,CACbiB,OAAQ,CACNf,QAAS,GACTgB,MAAO,IACPC,OAAQ,YAuCGC,EAnCC,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aAAmB,EACfC,mBAASF,EAAM,GAAGG,OAAvCC,EADoC,KAC5BC,EAD4B,KAU3C,OACE,+BACE,4BAEIL,EAAMM,KAAI,SAACC,EAAMC,GAAP,OACR,wBAAIC,IAAKD,EAAGf,MAAO,CAACiB,WAAYN,IAAWG,EAAKJ,MAAQ,OAAS,WAC/D,4BAAQV,MAAOd,EAAOiB,OAAQe,QAAS,kBAb5BC,EAagDL,EAAKJ,MAZ1EE,EAAUO,QACPX,GACDA,EAAaW,IAHK,IAACA,GAa6DC,KAAK,UAC1EN,EAAKO,a,YC5BTC,EAAgB,CAC3BC,WAAY,CACV,CACEC,EAAE,uJACFC,EAAE,ivBAcJ,CACED,EAAE,mCACFC,EAAE,qmBAyBNC,QAAS,CACP,CACEF,EAAE,0EACFC,EAAE,qbAOJ,CACED,EAAE,qEACFC,EAAE,4oBAuBJ,CACED,EAAE,mIACFC,EAAE,+hEAoHNE,KAAM,CACJ,CACEH,EAAE,0EACFC,EAAE,wDC9LFG,EAAe,CACnB,CAAEP,KAAM,aAAcX,MAAO,cAC7B,CAAEW,KAAM,WAAYX,MAAO,YAyBdmB,UAtBG,WAAO,IAAD,EAC0BpB,mBAASmB,EAAa,GAAGlB,OAAlEoB,EADe,KACGC,EADH,KAGhBC,EAAYC,mBAAQ,kBAAMX,EAAcQ,KAAmB,CAACA,IAElE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKtC,MAAM,SACX,kBAAC,EAAD,CAAWP,UAAU,QACnB,kBAAC,EAAD,CAASuB,aAAcuB,EAAqBxB,MAAOqB,KAErD,kBAAC,EAAD,CAAW3C,UAAU,QAClB+C,EAAUnB,KAAI,SAACW,EAAGT,GAAJ,OACb,kBAAC,EAAD,CAAMC,IAAKD,EAAG9B,UAAU,QAAQO,MAAOgC,EAAEA,EAAG7B,OAAQ6B,EAAEC","file":"component---src-pages-index-js-df61d8684843c195e127.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Container = ({ children, className }) => (\r\n  <div className={className}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default Container;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst styles = {\r\n  card: {\r\n    padding: 15,\r\n    background: 'white',\r\n    /** ie fallback */\r\n    boxShadow: '0 4px 8px 0 rgba(0,0,0,0.2)',\r\n    /** ie fallback */\r\n    borderRadius: 3,\r\n  },\r\n  title: {\r\n    marginBottom: '12px',\r\n    fontSize: '2.5em',\r\n  },\r\n  answer: {\r\n    padding: 10,\r\n    backgroundColor: '#f1f1f1',\r\n    display: 'inline-block',\r\n    fontSize: '1.3em',\r\n    lineHeight: 1.4,\r\n  }\r\n};\r\n\r\nconst Card = ({ title, answer, className }) => (\r\n  <section className={className} style={styles.card}>\r\n    <h1 style={styles.title} dangerouslySetInnerHTML={{__html: title}} />\r\n    <div style={styles.answer} dangerouslySetInnerHTML={{__html: answer}} />\r\n  </section>\r\n);\r\n\r\nCard.propTypes = {\r\n  title: PropTypes.string,\r\n  answer: PropTypes.string,\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default Card;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst styles = {\r\n  button: {\r\n    padding: 10,\r\n    width: 120,\r\n    cursor: 'pointer',\r\n  }\r\n};\r\n\r\nconst Sidebar = ({ items, onItemChange }) => {\r\n  const [active, setActive] = useState(items[0].value);\r\n\r\n  const onButtonClick = (val) => {\r\n    setActive(val);\r\n    if(onItemChange) {\r\n      onItemChange(val);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <aside>\r\n      <ul>\r\n        {\r\n          items.map((item, i) => (\r\n            <li key={i} style={{fontWeight: active === item.value ? 'bold' : 'normal'}}>\r\n              <button style={styles.button} onClick={() => onButtonClick(item.value)} type=\"button\">\r\n                {item.text}\r\n              </button>\r\n            </li>\r\n          ))\r\n        }\r\n      </ul>\r\n    </aside>\r\n  );\r\n};\r\n\r\nSidebar.propTypes = {\r\n  items: PropTypes.arrayOf(PropTypes.shape({\r\n    text: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n  })),\r\n  onItemChange: PropTypes.func,\r\n};\r\n\r\nexport default Sidebar;","export const questionsData = {\r\n  javascript: [\r\n    {\r\n      q: `What are the differences between <small><em>document.getElementsByClassName()</em></small> and <small><em>document.querySelectorAll()</em></small> ?`,\r\n      a: `\r\n      <p>\r\n        <code>getElementsByClassName</code> returns a htmlCollection which is live (it updates whenever the document changes) whereas <code>querySelectorAll</code> returns a node list which isn't live (static).\r\n      </p>\r\n      \r\n      <p>\r\n        Both can be iterated using for or for/of and can be transformed into an array using <code>Array.from(&lt;elements&gt;)</code>\r\n      </p>\r\n\r\n      <p>\r\n        When calling <code>getElementsByClassName</code> we pass a class name as string while on <code>querySelectorAll</code> we need to pass a css selector. <br /> <small>Example: <br /> <code>document.getElementsByClassName('myClass')</code> <br /> vs <br /><code>document.querySelectorAll('.myClass')</code></small>\r\n      </p>\r\n`\r\n    },\r\n    {\r\n      q: `What is a closure in javascript?`,\r\n      a: `\r\n      <p>\r\n        A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer functionâ€™s scope from an inner function even after the outer function has returned. It allows us to restrict access to our private members.\r\n      </p>\r\n\r\n      <p>\r\n        Example: \r\n<pre>\r\n<code>\r\nfunction makeAuth() {\r\n  var secret = 123;\r\n  return function(val) {\r\n    return val === secret;\r\n  }\r\n}\r\n\r\nvar login = makeAuth();\r\nlogin('abc') // false\r\nlogin(123) // true\r\n</code>\r\n</pre>\r\n`\r\n    },\r\n\r\n  ],\r\n  htmlCss: [\r\n    {\r\n      q: `What's the difference between a &lt;span&gt; and a &lt;div&gt; element?`,\r\n      a: `\r\n      <p>Span is an inline element, inline elements only take as much width as necessary, their heights, widths, top/bottom margins and paddings cannot be specified (it'll be ignored by browser).</p> \r\n      <p>Div is a block element, block elements start on a new line and takes full available width.</p>\r\n      <p>Div is often used as a container element.</p>\r\n      <p>Span is often used to mark up a part of a text.</p>\r\n      `\r\n    },\r\n    {\r\n      q: `What's the var() function in css? How to declare global variables?`,\r\n      a: `\r\n      <p>\r\n        <code>var()</code> function is used to get the value of a css variable. We can declare global variables using <code>:root</code> selector and <code>--variableName</code>\r\n        <br /> <small>Example: <br />\r\n        <code>\r\n        :root {\r\n          <br />\r\n        &nbsp;&nbsp;--myCustomColor: #123456;\r\n          <br />\r\n        }\r\n        <br />\r\n        .myClass {\r\n          <br />\r\n        &nbsp;&nbsp;background-color: var(--myCustomColor);\r\n          <br />\r\n        }\r\n        </code>\r\n      </p>\r\n      <p>\r\n        Although this is super useful, its browser support is not very good (Edge 15+)\r\n      </p>\r\n      `\r\n    },\r\n    {\r\n      q: `How to make a horizontally and vertically centered modal with dynamic height using only html/css? (no need to handle open/close)`,\r\n      a: `\r\n        <p>There are couple of ways:</p>\r\n        <p>1. Using <code>display: table;</code> and <code>display: table-cell; (old but best browser support)</code>\r\n<pre>\r\n<code>\r\n&lt;style&gt;\r\n.modal {\r\n  display: table;\r\n  position: fixed;\r\n  /** optional overlay color */\r\n  background: lightgrey;\r\n  top: 0;\r\n  left: 0;\r\n  height: 100%;\r\n  width: 100%;\r\n  z-index: 99999;\r\n}\r\n\r\n.modal__dialog {\r\n  /** IE margin auto fix */\r\n  text-align: center;\r\n  /** IE fix */\r\n  display: inline-block;\r\n  display: table-cell;\r\n  vertical-align: middle;\r\n}\r\n\r\n.modal__content {\r\n  margin: 0 auto;\r\n  background-color: gray;\r\n  width: 200px;\r\n  color: white;\r\n  text-align: left;\r\n}\r\n&lt;/style&gt;\r\n<br />\r\n&lt;div class=&quot;modal&quot;&gt;\r\n  &lt;div class=&quot;modal__dialog&quot;&gt;\r\n    &lt;div class=&quot;modal__content&quot;&gt;\r\n      Hello World!\r\n    &lt;/div&gt;\r\n  &lt;/div&gt;\r\n&lt;/div&gt;\r\n</code>\r\n</pre>\r\n\r\n<p>2. Using css transform property & translate</p>\r\n<pre>\r\n<code>\r\n&lt;style&gt;\r\n.modal {\r\n  position: fixed;\r\n  /** optional overlay color */\r\n  background: lightgrey;\r\n  top: 0;\r\n  left: 0;\r\n  height: 100%;\r\n  width: 100%;\r\n  z-index: 99998;\r\n}\r\n\r\n.modal__content {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background-color: gray;\r\n  width: 200px;\r\n  color: white;\r\n}\r\n\r\n&lt;/style&gt;\r\n<br />\r\n&lt;div class=&quot;modal&quot;&gt;\r\n  &lt;div class=&quot;modal__content&quot;&gt;\r\n    Hello World!\r\n  &lt;/div&gt;\r\n&lt;/div&gt;\r\n</code>\r\n</pre>\r\n<p>3. Using flexbox</p>\r\n<pre>\r\n<code>\r\n&lt;style&gt;\r\n.modal {\r\n  position: fixed;\r\n  display: flex;\r\n  /** optional overlay color */\r\n  background: lightgrey;\r\n  top: 0;\r\n  left: 0;\r\n  height: 100%;\r\n  width: 100%;\r\n  z-index: 99999;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.modal__content {\r\n  background-color: gray;\r\n  width: 200px;\r\n  color: white;\r\n}\r\n\r\n&lt;/style&gt;\r\n<br />\r\n&lt;div class=&quot;modal&quot;&gt;\r\n  &lt;div class=&quot;modal__content&quot;&gt;\r\n    Hello World!\r\n  &lt;/div&gt;\r\n&lt;/div&gt;\r\n</code>\r\n</pre>\r\n      `\r\n    },\r\n  ],\r\n  scss: [\r\n    {\r\n      q: `What's the difference between a &lt;span&gt; and a &lt;div&gt; element?`,\r\n      a: `Span is an inline element. Div is a block element.`\r\n    },\r\n  ]\r\n};","import React, { useState, useMemo } from \"react\";\r\nimport { Link } from \"gatsby\";\r\n\r\nimport Layout from \"../components/layout\";\r\nimport Container from \"../components/container\";\r\nimport Card from \"../components/card\";\r\nimport Sidebar from \"../components/sidebar\";\r\nimport SEO from \"../components/seo\";\r\n\r\nimport { questionsData } from '../data/questions';\r\n\r\nconst sidebarItems = [\r\n  { text: 'Javascript', value: 'javascript' },\r\n  { text: 'HTML/CSS', value: 'htmlCss' },\r\n];\r\n\r\nconst IndexPage = () => {\r\n  const [selectedCategory, setSelectedCategory] = useState(sidebarItems[0].value);\r\n\r\n  const questions = useMemo(() => questionsData[selectedCategory], [selectedCategory]);\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Home\" />\r\n      <Container className=\"w-20\">\r\n        <Sidebar onItemChange={setSelectedCategory} items={sidebarItems} />\r\n      </Container>\r\n      <Container className=\"w-80\">\r\n        {questions.map((q, i) => (\r\n          <Card key={i} className=\"mb-25\" title={q.q} answer={q.a} />\r\n        ))}\r\n      </Container>\r\n      {/* <Link to=\"/page-2/\">Go to page 2</Link> <br />\r\n      <Link to=\"/using-typescript/\">Go to \"Using TypeScript\"</Link> */}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n"],"sourceRoot":""}